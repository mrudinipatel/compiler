/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE;
terminal ASSIGN, EQ, LT, GT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, SEMI;
terminal String ID, NUM, TRUTH, VOID;
terminal ERROR;
terminal BOOL, INT, RETURN, WHILE, TRUE, FALSE, LEQT, GEQT, NEQ, UBW, OR, AND, COMMA, LBRACK, RBRACK, LBRACE, RBRACE;
   
non terminal Exp program1;
non terminal ExpList program, declaration_list, param_list, params, statement_list, local_declarations, arg_list, args;
non terminal Exp declaration, var_declaration, fun_declaration, fun_prototype, param, compound_stmt, statement, expression_stmt, selection_stmt, iteration_stmt, return_stmt, expression, var, obool_expression, abool_expression, ubool_expression, simple_expression, additive_expression, term, signed_factor, factor, call;
non terminal String type_specifier;
non terminal Integer addop, mulop, relop;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

program ::= declaration_list:dl
            {: RESULT = dl; :}
         ;

declaration_list ::= declaration_list:dl declaration:d 
                  {:ExpList t = dl; //loop to end of dl then add d to tail
                     while(t.tail != null)
                     {
                        t = t.tail;
                     }
                     t.tail = new ExpList(d, null);
                     RESULT = dl;
                  :}
                  |
                  declaration:d
                  {: RESULT = new ExpList(d, null); :}
                  ;

declaration ::= var_declaration:vd
               {: RESULT = vd; :}
            | fun_declaration:fd
               {: RESULT = fd; :}
            | fun_prototype:fp
               {: RESULT = fp; :}
            ;

var_declaration ::= type_specifier:ts ID:i SEMI
                  {: RESULT = new VarDeclNode(tsleft, tsright, ts, i); :}
                  | type_specifier:ts ID:i LBRACK NUM:n RBRACK SEMI
                  {: RESULT = new ArrDeclNode(tsleft, tsright, ts, i, n); :}
                  ;

type_specifier ::= BOOL:b
                  {: RESULT = "bool"; :}
               | INT:i
                  {: RESULT = "int"; :}
               | VOID:v
                  {: RESULT = "void"; :}
               ;

fun_declaration ::= type_specifier:ts ID:i LPAREN params:p RPAREN compound_stmt:cs
                     {: RESULT = new FunDeclNode(tsleft, tsright, ts, i, p, cs); :}
                  ;

fun_prototype ::= type_specifier:ts ID:i LPAREN params:p RPAREN SEMI
                  {: RESULT = new FunProtoNode(tsleft, tsright, ts, i, p); :}
               ;

params ::= param_list:pl 
            {: RESULT = pl; :}
         | VOID:v
            {: RESULT = null; :}
         ;

param_list ::= param_list:pl COMMA param:p 
            {:ExpList t = pl;
               while (t.tail != null)
               {
                  t = t.tail;
               }
               t.tail = new ExpList(p, null);
               RESULT = pl;
            :}
            |
            param:p
            {:
               RESULT = new ExpList(p, null);
            :}
            ;

param ::= type_specifier:ts ID:i 
         {: RESULT = new VarDeclNode(tsleft, tsright, ts, i); :}
      | type_specifier:ts ID:i LBRACK RBRACK
         {: RESULT = new ArrDeclNode(tsleft, tsright, ts, i, null); :}
      ;

compound_stmt ::= LBRACE:l local_declarations:ld statement_list:sl RBRACE
                  {: RESULT = new CompoundStmtNode(lleft, lright, ld, sl); :}
               ;

local_declarations ::= local_declarations:ld var_declaration:v
                     {:
                        ExpList t = ld;
                        RESULT = null;
                        if(t != null)
                        {
                           while (t.tail != null)
                           {
                           t = t.tail;
                           }
                           if (v != null)
                           {
                           t.tail = new ExpList(v, null);
                           }
                           RESULT = ld;
                        }
                        else
                        {
                           if (v != null)
                           {
                           RESULT = new ExpList(v, null);
                           }
                        }
                     :}
                     |
                     {:RESULT = null; :}
                     ;

statement_list ::= statement_list:sl statement:s 
                  {:
                     ExpList t = sl;
                     RESULT = null;
                     if (t != null)
                     {
                        while (t.tail != null)
                        {
                        t = t.tail;
                        }
                        if (s != null)
                        {
                        t.tail = new ExpList(s, null);
                        }
                        RESULT = sl;
                     }
                     else
                     {
                        if (s != null)
                        {
                        RESULT = new ExpList(s, null);
                        }
                     }
                  :}
                  |
                  {:RESULT = null; :}
                  ;

statement ::= expression_stmt:e 
               {: RESULT = e; :}
            | compound_stmt:c 
               {: RESULT = c; :}
            | selection_stmt:s 
               {: RESULT = s; :}
            | iteration_stmt:i 
               {: RESULT = i; :}
            | return_stmt:r
               {: RESULT = r; :}
            ;

expression_stmt ::= expression:e SEMI 
                     {: RESULT = e; :}
                  | SEMI;

selection_stmt ::= IF:i LPAREN expression:e RPAREN statement:s 
                  {: RESULT = new IfNode(ileft, iright, e, s, null); :}
               | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                  {: RESULT = new IfNode(ileft, iright, e, s1, s2); :}
               ;

iteration_stmt ::= WHILE:w LPAREN expression:e RPAREN statement:s
                  {: RESULT = new WhileNode(wleft, wright, e, s); :}
               ;

return_stmt ::= RETURN:r expression:e SEMI
               {: RESULT = new ReturnNode(rleft, rright, e); :}
            | RETURN:r SEMI
               {: RESULT = new ReturnNode(rleft, rright, null); :}
            ;

expression ::= var:v ASSIGN expression:e 
               {: RESULT = new AssignNode(vleft, vright, v, e); :}
            | obool_expression: o
               {: RESULT = o; :}
            ;

var ::= ID:i 
         {: RESULT = new VarNode(ileft, iright, i); :}
      | ID:i LBRACK expression:e RBRACK
         {: RESULT = new ArrNode(ileft, iright, i, e); :}
      ;

obool_expression ::= obool_expression:obexp OR abool_expression:abexp 
                        {: RESULT = new BinaryOpNode(obexp.row, obexp.col, obexp, BinaryOpNode.OR, abexp); :}
                   | abool_expression:abexp 
                        {: RESULT = abexp; :}
                   ;

abool_expression ::= abool_expression:abexp AND ubool_expression:ubexp 
                        {: RESULT = new BinaryOpNode(abexp.row, abexp.col, abexp, BinaryOpNode.AND, ubexp); :}
                   | ubool_expression:ubexp 
                        {: RESULT = ubexp; :}
                   ;

ubool_expression ::= UBW:ubw ubool_expression:ubexp 
                        {: RESULT = new UnaryOpNode(ubwleft, ubwright, UnaryOpNode.UBW, ubexp); :}
                   | simple_expression:sexp 
                        {: RESULT = sexp; :}
                   ;

simple_expression ::= additive_expression:addexp1 relop:op additive_expression:addexp2
                     {: RESULT = new BinaryOpNode(addexp1.row, addexp1.col, addexp1, op, addexp2); :}
                   | additive_expression:addexp
                     {: RESULT = addexp; :}
                   ;

relop ::= LEQT 
            {: RESULT = BinaryOpNode.LEQT; :}
        | LT 
            {: RESULT = BinaryOpNode.LT; :}
        | GT 
            {: RESULT = BinaryOpNode.GT; :}
        | GEQT 
            {: RESULT = BinaryOpNode.GEQT; :}
        | EQ 
            {: RESULT = BinaryOpNode.EQ; :}
        | NEQ 
            {: RESULT = BinaryOpNode.NEQ; :}
        ;

additive_expression ::= additive_expression:addexp addop:op term:trm 
                        {: RESULT = new BinaryOpNode(addexp.row, addexp.col, addexp, op, trm); :}
                     | term:trm 
                        {: RESULT = trm; :}
                     ;

addop ::= PLUS 
            {: RESULT = BinaryOpNode.PLUS; :}
        | MINUS 
            {: RESULT = BinaryOpNode.MINUS; :}
        ;

term ::= term:trm mulop:m signed_factor:f 
         {: RESULT = new BinaryOpNode(trmleft, trmright, null, m, f); :}
      | signed_factor:f
         {: RESULT = f; :}
      ;

mulop ::= TIMES 
         {: RESULT = BinaryOpNode.TIMES; :}
      | OVER
         {: RESULT = BinaryOpNode.OVER; :}
      ;

signed_factor ::= MINUS:m signed_factor:f 
                  {: RESULT = new BinaryOpNode(mleft, mright, null, BinaryOpNode.MINUS, f); :}
               | factor:f 
                  {: RESULT = f; :}
               ;

factor ::= LPAREN expression:e RPAREN 
              {: RESULT = e; :}
         | var:v 
              {: RESULT = v; :}
         | call:c 
              {: RESULT = c; :}
         | NUM:n 
              {: RESULT = new NumNode(nleft, nright, n); :}
         | TRUTH:t 
              {:  :}
         ;

call ::= ID:i LPAREN args:a RPAREN
         {: RESULT = new FunCallNode(ileft, iright, i, a); :}
         ;

args ::= arg_list:a
         {: RESULT = a; :}
      | 
         {: RESULT = (ExpList)null; :};

arg_list ::= arg_list:a COMMA expression:e 
            {:
               ExpList t = a;
               while (t.tail != null)
               {
                  t = t.tail;
               }
               t.tail = new ExpList( e, null );
               RESULT = a;
            :}
          | expression:e
            {: RESULT = new ExpList( e, null); :};



